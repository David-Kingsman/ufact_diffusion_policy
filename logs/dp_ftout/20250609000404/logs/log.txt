
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot_eef_pose', 'label', 'robot_joint', 'robot_joint_vel']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
obs key camera_depth with shape (240, 320)
ObservationKeyToModalityDict: camera_depth not found, adding camera_depth to mapping with assumed low_dim/rgb modality!
obs key camera_rgb with shape (240, 320, 3)
ObservationKeyToModalityDict: camera_rgb not found, adding camera_rgb to mapping with assumed low_dim/rgb modality!
obs key force with shape (6,)
ObservationKeyToModalityDict: force not found, adding force to mapping with assumed low_dim/rgb modality!
obs key label with shape ()
obs key pointcloud with shape (10000, 6)
ObservationKeyToModalityDict: pointcloud not found, adding pointcloud to mapping with assumed low_dim/rgb modality!
obs key robot_eef_pose with shape (7,)
obs key robot_joint with shape (7,)
obs key robot_joint_vel with shape (7,)
obs key stage with shape ()
ObservationKeyToModalityDict: stage not found, adding stage to mapping with assumed low_dim/rgb modality!
obs key timestamp with shape ()
ObservationKeyToModalityDict: timestamp not found, adding timestamp to mapping with assumed low_dim/rgb modality!

ModuleDict(
  (obs): ObservationEncoder(
      Key(
          name=robot_eef_pose
          shape=[7]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      Key(
          name=robot_joint
          shape=[7]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      Key(
          name=robot_joint_vel
          shape=[7]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      output_shape=[21]
  )
)
number of parameters: 6.551988e+07

============= Model Summary =============
DiffusionPolicyUNetDex (
  ModuleDict(
    (policy): ModuleDict(
      (obs_encoder): ObservationGroupEncoder(
          group=obs
          ObservationEncoder(
              Key(
                  name=robot_eef_pose
                  shape=[7]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              Key(
                  name=robot_joint
                  shape=[7]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              Key(
                  name=robot_joint_vel
                  shape=[7]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              output_shape=[21]
          )
      )
      (noise_pred_net): ConditionalUnet1D(
        (mid_modules): ModuleList(
          (0-1): 2 x ConditionalResidualBlock1D(
            (blocks): ModuleList(
              (0-1): 2 x Conv1dBlock(
                (block): Sequential(
                  (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                  (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                  (2): Mish()
                )
              )
            )
            (cond_encoder): Sequential(
              (0): Mish()
              (1): Linear(in_features=277, out_features=2048, bias=True)
              (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
            )
            (residual_conv): Identity()
          )
        )
        (diffusion_step_encoder): Sequential(
          (0): SinusoidalPosEmb()
          (1): Linear(in_features=256, out_features=1024, bias=True)
          (2): Mish()
          (3): Linear(in_features=1024, out_features=256, bias=True)
        )
        (up_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(2048, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(2048, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(512, 512, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(1024, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(256, 256, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
        (down_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(7, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(7, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(256, 256, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (2): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(512, 1024, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=277, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Identity()
          )
        )
        (final_conv): Sequential(
          (0): Conv1dBlock(
            (block): Sequential(
              (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
              (1): GroupNorm(8, 256, eps=1e-05, affine=True)
              (2): Mish()
            )
          )
          (1): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
        )
      )
    )
  )
)

SequenceDataset: normalizing observations...
  0%|                                                                                                              | 0/5 [00:00<?, ?it/s] 20%|####################4                                                                                 | 1/5 [00:00<00:02,  1.81it/s] 40%|########################################8                                                             | 2/5 [00:01<00:01,  1.76it/s] 60%|#############################################################2                                        | 3/5 [00:02<00:01,  1.22it/s] 80%|#################################################################################6                    | 4/5 [00:02<00:00,  1.38it/s]100%|######################################################################################################| 5/5 [00:03<00:00,  1.70it/s]100%|######################################################################################################| 5/5 [00:03<00:00,  1.57it/s]

============= Training Dataset =============
SequenceDataset (
	path=data/robomimic.hdf5
	obs_keys=('camera_depth', 'camera_rgb', 'force', 'label', 'pointcloud', 'robot_eef_pose', 'robot_joint', 'robot_joint_vel', 'stage', 'timestamp')
	seq_length=20
	filter_key=none
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=none
	num_demos=6
	num_sequences=3815
)
SequenceDataset: normalizing actions...
  0%|                                                                                                              | 0/5 [00:00<?, ?it/s]100%|####################################################################################################| 5/5 [00:00<00:00, 6806.73it/s]
DEBUG: actions normalization_stats: dict_keys(['scale', 'offset'])
Sample keys: dict_keys(['actions', 'rewards', 'dones', 'obs', 'index'])
actions: shape (20, 7)
rewards: shape (20,)
dones: shape (20,)
**************************************************
Warnings generated by robomimic have been duplicated here (from above) for convenience. Please check them carefully.
**************************************************

  0%|                                                                                                            | 0/119 [00:00<?, ?it/s]clamp ok -1.0 0.9837024341650336
actions stats: -1.0 0.9837024341650336 0.0371144275745726
obs_features stats: -7.253647327423096 7.355409145355225 -0.09855185449123383
noisy_actions stats: -3.333012104034424 3.4531383514404297 0.018754929304122925
noise_pred stats: -1.6227827072143555 1.7050329446792603 0.014209703542292118
noise_arm stats: -3.366391897201538 3.46317720413208 0.003269969252869487 torch.Size([32, 20, 7])
noise_pred_arm stats: -1.6227827072143555 1.7050329446792603 0.01420969981700182 torch.Size([32, 20, 7])
  1%|8                                                                                                   | 1/119 [00:02<04:02,  2.05s/it]clamp ok -1.0 0.9889082363286921
obs_features stats: -4.3003764152526855 3.6470282077789307 0.040190644562244415
noisy_actions stats: -3.129655122756958 3.072350025177002 0.029236868023872375
noise_pred stats: -2.1025030612945557 1.9495972394943237 0.00789532158523798
noise_arm stats: -3.51373553276062 3.456613063812256 0.006642255000770092 torch.Size([32, 20, 7])
noise_pred_arm stats: -2.1025030612945557 1.9495972394943237 0.007895320653915405 torch.Size([32, 20, 7])
clamp ok -1.0 0.9768108892530708
obs_features stats: -4.193966388702393 6.850236415863037 0.011078184470534325
noisy_actions stats: -3.2283451557159424 3.240072011947632 0.011553709395229816
noise_pred stats: -1.294921636581421 1.1784323453903198 -0.021959928795695305
noise_arm stats: -3.3548507690429688 3.3055129051208496 -0.023928040638566017 torch.Size([32, 20, 7])
noise_pred_arm stats: -1.294921636581421 1.1784323453903198 -0.021959926933050156 torch.Size([32, 20, 7])
  3%|##5                                                                                                 | 3/119 [00:02<01:08,  1.70it/s]clamp ok -1.0 0.9478634618518034
obs_features stats: -3.6513149738311768 3.714482545852661 -0.025597473606467247
noisy_actions stats: -3.3205652236938477 3.4836130142211914 0.02345862053334713
noise_pred stats: -0.9403764605522156 0.92155921459198 -0.013794030994176865
noise_arm stats: -3.713301181793213 3.7590832710266113 -0.0015770409954711795 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.9403764605522156 0.92155921459198 -0.013794030994176865 torch.Size([32, 20, 7])
  3%|###3                                                                                                | 4/119 [00:02<00:48,  2.39it/s]clamp ok -1.0 0.9695139866571859
obs_features stats: -4.088513374328613 4.419775009155273 0.01956300251185894
noisy_actions stats: -3.5949909687042236 3.2591562271118164 0.01719338446855545
noise_pred stats: -0.9793564677238464 0.9128252863883972 -0.00601174496114254
noise_arm stats: -3.565922737121582 3.567002058029175 -0.013051314279437065 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.9793564677238464 0.9128252863883972 -0.00601174496114254 torch.Size([32, 20, 7])
  4%|####2                                                                                               | 5/119 [00:02<00:35,  3.18it/s]clamp ok -1.0 0.9510024781632335
obs_features stats: -3.2177298069000244 6.379459381103516 0.021480802446603775
noisy_actions stats: -3.0570240020751953 3.5910027027130127 0.03017047420144081
noise_pred stats: -0.77409827709198 0.8848719596862793 0.002576360246166587
noise_arm stats: -3.7938027381896973 3.914158344268799 -0.004674599971622229 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.77409827709198 0.8848719596862793 0.0025763611774891615 torch.Size([32, 20, 7])
clamp ok -1.0 0.9772593207474685
obs_features stats: -4.651121139526367 4.428013324737549 -0.03577800840139389
noisy_actions stats: -3.6281192302703857 3.4091193675994873 0.04395193234086037
noise_pred stats: -0.8257022500038147 0.6794900894165039 0.009112156927585602
noise_arm stats: -3.6468112468719482 3.4059576988220215 0.00241631711833179 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.8257022500038147 0.6794900894165039 0.009112157858908176 torch.Size([32, 20, 7])
  6%|#####8                                                                                              | 7/119 [00:02<00:23,  4.79it/s]clamp ok -1.0 1.0
obs_features stats: -5.154086112976074 5.214582920074463 0.027809320017695427
noisy_actions stats: -3.426801919937134 3.4532487392425537 0.020310373976826668
noise_pred stats: -0.9056969285011292 0.6371281147003174 -0.005843904335051775
noise_arm stats: -3.4266698360443115 3.9163596630096436 0.0011263744672760367 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.9056969285011292 0.6371281147003174 -0.00584390526637435 torch.Size([32, 20, 7])
clamp ok -1.0 0.9969407116626874
obs_features stats: -5.073319435119629 6.4407639503479 0.027528885751962662
noisy_actions stats: -2.9971799850463867 3.269324541091919 0.044982098042964935
noise_pred stats: -0.6864389181137085 0.6442336440086365 -0.004619047977030277
noise_arm stats: -3.196850538253784 3.4838624000549316 0.006201819982379675 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.6864389181137085 0.6442336440086365 -0.004619047977030277 torch.Size([32, 20, 7])
  8%|#######5                                                                                            | 9/119 [00:02<00:17,  6.13it/s]clamp ok -1.0 0.9659825062516618
obs_features stats: -3.755645275115967 6.515826225280762 0.03642774373292923
noisy_actions stats: -2.9134490489959717 3.683375358581543 0.03379988670349121
noise_pred stats: -0.589514434337616 0.6020424962043762 -0.0014968628529459238
noise_arm stats: -3.2695798873901367 3.6707303524017334 0.004204068332910538 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.589514434337616 0.6020424962043762 -0.0014968629693612456 torch.Size([32, 20, 7])
clamp ok -1.0 0.9926721378507793
obs_features stats: -5.446516513824463 6.584350109100342 -0.021760379895567894
noisy_actions stats: -3.005000114440918 3.327366352081299 0.03132352977991104
noise_pred stats: -0.4338935911655426 0.48834991455078125 -0.0010733569506555796
noise_arm stats: -3.7484383583068848 3.809425115585327 -0.013183409348130226 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.4338935911655426 0.48834991455078125 -0.001073356601409614 torch.Size([32, 20, 7])
  9%|#########1                                                                                         | 11/119 [00:02<00:14,  7.21it/s]clamp ok -1.0 0.9719473302769737
obs_features stats: -3.9486007690429688 3.735560894012451 0.046327825635671616
noisy_actions stats: -3.4627323150634766 2.944941997528076 0.0030601152684539557
noise_pred stats: -0.4813382625579834 0.5438665151596069 -0.004464159719645977
noise_arm stats: -3.7826855182647705 3.3358681201934814 -0.010385092347860336 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.4813382625579834 0.5438665151596069 -0.004464160185307264 torch.Size([32, 20, 7])
clamp ok -1.0 0.9695992253785866
obs_features stats: -6.275757312774658 6.768178462982178 -0.014461994171142578
noisy_actions stats: -3.523216724395752 3.299359083175659 0.00245653442107141
noise_pred stats: -0.635593593120575 0.4516873359680176 -0.009610852226614952
noise_arm stats: -4.173389434814453 3.311262845993042 -0.020581630989909172 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.635593593120575 0.4516873359680176 -0.009610852226614952 torch.Size([32, 20, 7])
 11%|##########8                                                                                        | 13/119 [00:03<00:13,  7.94it/s]clamp ok -1.0 0.9824663593927179
obs_features stats: -4.839415073394775 4.722464084625244 0.02650662325322628
noisy_actions stats: -3.667332410812378 3.024249315261841 0.04437961429357529
noise_pred stats: -0.5425688624382019 0.4653742015361786 -0.014493066817522049
noise_arm stats: -3.8139452934265137 3.970337152481079 0.010866610333323479 torch.Size([32, 20, 7])
noise_pred_arm stats: -0.5425688624382019 0.4653742015361786 -0.014493066817522049 torch.Size([32, 20, 7])
clamp ok -1.0 0.9870046413089183
